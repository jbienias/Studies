--Kolokwium 2016

-- Zad 1
member x [] = False
member x (y:ys)
  | x == y = True
  | otherwise = member x ys

delete_one x [] = []
delete_one x (y:ys)
  | x == y = ys
  | otherwise = [y] ++ (delete_one x ys)

delete_all x [] = []
delete_all x (y:ys)
  | x == y = delete_all x ys
  | otherwise = [y] ++ (delete_all x ys)

exists p [] = True
exists p (x:xs) 
  | p x = exists p xs
  | otherwise = False

-- Zad 2
cut (x:xs)
  | length (x:xs) < 2 = []
  | otherwise = delete_last xs

delete_last (x:[]) = []
delete_last (x:xs) = [x] ++ delete_last xs

delete_last_alt l = 
  let (y:ys) = reverse(l) in reverse(ys)

reverse_ [] = []
reverse_ (x:xs) = reverse_ xs ++ [x]

palindrom l
  | l == reverse_(l) = True
  | otherwise = False

main = do
  print(member 5 [1,2,3])
  print(delete_one 5 [1,2,5,3,4,5,5])
  print(delete_all 5 [1,2,5,3,4,5,5])
  print(exists odd [1,3,5])
  print(exists even[2,4,5])
  print(delete_last [1,2,3])
  print(delete_last_alt [1,2,3])
  print(reverse_ [1,2,3])
  print(cut [1,2,3,4])
  print(palindrom [1,2,3,2,1])