System inferencji dla typowania w Haskellu

Formuły : wyrażenia T |- e :: alfa

Aksjomaty:
1. e jest operacją bazową; Ø |- e :: alfa (np.  Ø |- 2 :: Int, Ø |- (+) :: Int -> Int -> Int )
2. e jest zmienną (trywialne typowanie/początkowe); {e :: alfa} |- e :: alfa

Reguły:
1. Dla budowy funkcji

	{x :: alfa} ∨ T |- e :: beta
	-----------------------------
	T |- (\x ->e) :: alfa -> beta
	
2a. Dla zastosowania funkcji (podstawowa - nie potrzeba unifikacji typów) (aplikacji funkcji)

	T1 |- f :: alfa -> beta, T2 |- x :: alfa
	----------------------------------------
		T1 ∨ T2 |- (f x) :: beta
	
	gdzie T1 i T2 są kompatybilne - jeśli dla {x :: alfa} podzbiorem T1 i {x :: beta} podzbiorem T2 mamy alfa == beta
	(tzn. nie ma sytuacji T1 = {y :: Int} i T2 = {y :: [Int]})
	
2b. Dla zastosowania funkcji (szczegółowa - potrzebna jest unifikacja typów) (aplikacji funkcji)

funkcja G; Var -> Type, taka, że {x | G(x) != x}, G = [x1 | t1, ..., xn/tn]

	
	T1 |- f :: alfa -> beta, T2 |- x :: gama
	-------------------------------------------------------
		G(T1 ∨ T2) |- (f x) :: G(beta)	, G(alfa) = G(gama) (lub po prostu G = mgu(alfa, gama))
	
Przykłady:
a) podwójne zastosowanie budowy funkcji

	{x :: Int, a :: Int} |- a + 2 * x :: Int
	--------------------------------------------
	{x :: Int} |- (\a -> a + 2 * x) :: Int -> Int
	---------------------------------------------
	Ø |- (\x -> (\a -> a + 2 * x)) :: Int -> (Int -> Int) lub (prościej) Ø |- \x a -> a + 2 * x :: Int -> (Int -> Int)
	
b) zastosowanie funkcji (bez potrzeby unifikacji)
	
	Funkcja: {a :: Int} |- (\x -> a + 2 * x) :: Int -> Int
	Zmienna funkcji:  5*y
	
	1. Ø |- (*) :: Int -> (Int -> Int) (Aksjomat 1)
	2. Ø |- 5 :: Int (Aksjomat 1)
	3. Ø |- (* 5) ::Int -> Int (Reguła 2 (1,2))
	4. {y :: alfa} |- y :: alfa (Aksjomat 2)
	5. {y :: Int} |- (* 5 y) :: Int (Reguła 2 (3,4))
	6. {a :: Int, y :: Int} |- (\x -> a + 2 * x)(* 5 y) :: Int (Reguła 2 (funkcja, zmienna))

c) zastosowania funkcji (potrzebujemy unifikacji)

Ø |- map :: (a -> b) -> [a] -> [b]
Ø |- square :: Int -> Int

alfa = a -> b
beta = [a] -> [b]
gama = Int -> Int

G(alfa) = G(gama)  
G(a -> b) = G(Int -> Int) 
G[a/Int, b/Int]

			alfa          beta                       gama
Ø |- map :: (a -> b) -> [a] -> [b], Ø |- square :: Int -> Int
--------------------------------------------------------------
	Ø |- (map square) :: [Int] -> [Int], G[a/Int, b/Int]
