Niech będzie dany następujący typ dla drzew binarnych.

 data BinTree a = Leaf a | Node a (BinTree a) (BinTree a)

Proszę napisać następujące funkcje

  a) heightBinTree, która obliczy głębokość drzewa.
  b) sizeBinTree, która obliczy ilość węzłów w drzewie.
  c) maxBinTree, która obliczy największy element w drzewie.
  d) preBinTree, której wartością jest lista elementów drzewa w porządku prefiksowym.

Proszę także zrealizować funkcje te używać nadające się funkcje mapBinTree i foldBinTree. 

data BinTree a = Leaf a | Node a (BinTree a) (BinTree a)

heightBinTree (Leaf a) = 1
heightBinTree (Node a l r) = 1 + (max (heightBinTree l) (heightBinTree r))

sizeBinTree (Leaf a) = 1
sizeBinTree (Node a l r) = 1 + (sizeBinTree l) + (sizeBinTree r)

maxBinTree (Leaf a) = a
maxBinTree (Node a l r) = max (max a (maxBinTree l)) (maxBinTree r)

preBinTree (Leaf a) = [a]
preBinTree (Node a l r) = [a] ++ (preBinTree l) ++ (preBinTree r)

--te same funkcje tylko ze z fold/map dla BinTree

--map dla BinTree
mapBinTree f (Leaf a) = (Leaf (f a))
mapBinTree f (Node a l r) = Node (f a) (mapBinTree f l) (mapBinTree f r)

--Przypomnienie jak wyglada foldl
--foldl f e [] = e
--foldl f e (x:xs) = foldl f (f e x) xs

--eksperyment - konwersja drzewa do listy w kolejnosci preorder i puszczenie foldl
foldBinTreeTest f e t = foldl f e (preBinTree t)

--fold dla BinTree
foldBinTree f g (Leaf a) = g a
foldBinTree f g (Node a l r) = f a (foldBinTree f g l) (foldBinTree f g r)


heightBinTreeFold = foldBinTree (\x y z -> 1+(max y z)) (\x->1)

sizeBinTreeFold = foldBinTree (\x y z -> 1+y+z) (\x->1)

max3 :: Int -> Int-> Int-> Int
max3 x y z = max x (max y z)
maxBinTreeFold = foldBinTree max3 (\x->x)

preBinTreeFold = foldBinTree (\x y z -> [x]++y++z) (\x -> [x])